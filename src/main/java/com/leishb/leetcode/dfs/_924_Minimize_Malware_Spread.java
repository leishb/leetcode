package com.leishb.leetcode.dfs;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Created by me on 2019/12/3.
 */
public class _924_Minimize_Malware_Spread {


    /**
     * Accepted
     * @param graph
     * @param initial
     * @return
     */
    public int minMalwareSpread(int[][] graph, int[] initial) {
        Arrays.sort(initial);
        int[] parents = new int[graph.length];
        for (int i=0;i<parents.length;i++){
            parents[i] = i;
        }
        for (int i=0;i<graph.length;i++){
            for (int j=i+1;j<graph.length;j++){
                if (graph[i][j]==0) continue;
                int rx = find(i, parents);
                int ry = find(j, parents);
                if (rx!=ry) parents[rx] = ry;
            }
        }
        int[] counts = new int[parents.length];
        for (int i=0;i<parents.length;i++){
            int p = find(i, parents);
            counts[p]++;
        }
        Map<Integer, Integer> map = new HashMap<>();
        for (int k : initial){
            int p = find(k, parents);
            map.put(p, map.getOrDefault(p, 0)+1);
        }
        int res = -1, min = Integer.MIN_VALUE;
        for (int k : initial){
            int p = find(k, parents);
            if (map.get(p)==1 && counts[p] > min){
                res = k;
                min = counts[p];
            }
        }
        return res!=-1 ? res : initial[0];
    }

    private int find(int x, int[] parents){
        if (x==parents[x]) return x;
        parents[x] = find(parents[x], parents);
        return parents[x];
    }
}
