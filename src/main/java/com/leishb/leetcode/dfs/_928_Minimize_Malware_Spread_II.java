package com.leishb.leetcode.dfs;

import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

/**
 * Created by me on 2019/12/3.
 */
public class _928_Minimize_Malware_Spread_II {


    /**
     * Accepted
     * @param graph
     * @param initial
     * @return
     */
    public int minMalwareSpread(int[][] graph, int[] initial) {
        if (initial.length==1) return initial[0];
        Arrays.sort(initial);
        int res = -1, min = Integer.MAX_VALUE;
        for (int k : initial){
            UF uf = new UF(graph.length);
            for (int i=0;i<graph.length;i++){
                for (int j=i+1;j<graph.length;j++){
                    if (i==k || j==k || graph[i][j] == 0) continue;
                    uf.union(i, j);
                }
            }
            int total = 0;//effected malware
            Set<Integer> seen = new HashSet<>();
            for (int r : initial){
                if (r==k) continue;
                int p = uf.find(r, uf.parents);
                if (seen.add(p)){
                    total += uf.size[p];
                }
            }
            if (total < min){
                res = k;
                min = total;
            }
        }
        return res;
    }



    class UF {

        int[] parents;
        int[] size;

        UF(int n){
            this.parents = new int[n];
            this.size = new int[n];
            for (int i=0;i<n;i++){
                parents[i] = i;
                size[i] = 1;
            }
        }

        public int find(int x, int[] parents){
            if (x==parents[x]) return x;
            parents[x] = find(parents[x], parents);
            return parents[x];
        }


        public void union(int x, int y){
            int rx = find(x, parents);
            int ry = find(y, parents);
            if (rx!=ry){
                parents[rx] = ry;
                size[ry] += size[rx];
            }
        }
    }
}
